services:
  db:
    image: postgres:16
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PGHOST=${POSTGRES_HOST}
      - PGPORT=${POSTGRES_PORT}
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - init_flag:/var/lib/db_init
    entrypoint: >
      bash -lc "
        set -o allexport; source .env; set +o allexport;
        #Build server if not done already
        if [ ! -f \"${DB_INIT_FLAG}\" ]; then
          echo '⚙️  First‐run: initializing database...';
          cd setup;
          bash setup_new_database.ssh Xcitri_inputs.setupPath;
        else
          echo '✅ Skipping DB init (flag exists at ${DB_INIT_FLAG})';
        fi;
        # Conda init  
        . /opt/conda/etc/profile.d/conda.sh  
        conda activate mgtenv
        #run cron pipeline
        #cd /app/Mgt/Mgt/Scripts
        #python cron_pipeline.py -s template -d Xcitri --allele_to_db --local
        # Finally start the server
        cd /app/Mgt/Mgt
        python manage.py runserver 0.0.0.0:8000 --settings Mgt.settings_template
      "

volumes:
  postgres_data:
  init_flag:
